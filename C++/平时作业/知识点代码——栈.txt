#include<iostream>
using namespace std;

class Stack 
{
private:
	int *stk;  //指向起始地址的指针
	int top;   //始终指向栈顶元素
	int MAXN;  //栈的最大存储容量
public:
	Stack(int size) ;     //构造函数，初始化一个栈时需要指定初始大小
	~Stack() ;            //析构函数
	int push(int x);      //压栈
	int pop(int * px);    //出栈
	int getTop();         //获取栈顶元素
	int isEmpty ()const;  //判断栈是否为空
	int isFull ()const;   //判断栈是否已满
	int size()const;      //获取栈的容量
};

Stack::Stack(int size) 
{
	MAXN = size;
	stk = new int[MAXN];
	top = -1;
}

Stack::~Stack() 
{
	delete stk;
}

int Stack::push(int x) 
{
	//栈满了
	if(top >= MAXN - 1)
	{
		return 0;
	}
	//先把栈顶调高，再向栈顶添加元素
	top++;
	stk[top] = x;
	return 1;
}

int Stack::pop(int *x) 
{
	//栈空了
	if (top == -1)
	{
		return -0;
	}
	//先把栈顶元素弹出，再调低栈顶
	*x = stk[top];
	top--;
	return 1;
}

int Stack::getTop() 
{
	if (top == -1)
	{
		return NULL;
	}
	return stk[top];
}

int Stack::isEmpty()const 
{
	//1为空，0为非空
	return top == -1;
}

int Stack::isFull()const 
{
	//1为满，0为非满
	return top == MAXN - 1;
}

int Stack::size() const
{
	return top;
}



int main()
{

	Stack s(20) ;
	cout << "是否为空栈" << s.isEmpty() << endl;
	s.push(100);
	cout << "100入栈" << endl;
	s.push(50);
	cout << "50入栈" << endl;
	s.push(10);
	cout << "10入栈" << endl;
	cout <<"栈的大小"<< s.size() << endl;
	int x = 0;
	s.pop(&x);
	cout <<"弹出的元素"<< x << endl;
	cout <<"弹出一个元素后栈的大小"<< s.size()<<endl;
	cout << "栈顶元素" << s.getTop() << endl;
	return 0;
}
